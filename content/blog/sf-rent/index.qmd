---
title: "Sliding windows for #TidyTuesday rents in San Francisco"
author: Julia Silge
date: '2022-08-04'
format: hugo
slug: sf-rent
categories:
  - rstats
tags:
  - rstats
summary: "The slider package provides support for flexible sliding window aggregation, and we can use these kinds of sliding windows to analyze rents over time."
---

```{r setup}
#| include: false
library(knitr)
knitr::opts_chunk$set(cache = TRUE, cache.lazy = FALSE, warning = FALSE, 
                      message = FALSE, echo = TRUE, dpi = 180,
                      fig.width = 7, fig.height = 5)
library(tidyverse)
library(silgelib)
theme_set(theme_plex())
update_geom_defaults("rect", list(fill = "midnightblue", alpha = 0.8))
update_geom_defaults("line", list(color = "midnightblue", alpha = 0.8))

library(wikipediapreview)
wp_init()

## if you don't have fancy fonts like IBM Plex installed, run
## theme_set(theme_minimal())
```

This is the latest in my series of [screencasts](https://www.youtube.com/juliasilge), but it is not about tidymodels this time around! I am stepping away from working on tidymodels to focus on [MLOps tools](https://vetiver.rstudio.com/) full-time, so moving forward I'll focus on a wider variety on topics in screencasts. An important part of managing deployed models is [monitoring](https://vetiver.rstudio.com/get-started/monitor.html), and this involves computing model metrics at a given aggregation. I love to use the [slider](https://davisvaughan.github.io/slider/) package by my coworker Davis Vaughan for this kind of task, and this screencast walks through how to use sliding window aggregation to analyze a recent [`#TidyTuesday` dataset](https://github.com/rfordatascience/tidytuesday) on rents in San Francisco. üèôÔ∏è

```{r}
#| echo: false
blogdown::shortcode("youtube", "DK4ERlywtUI")
```

</br>

Here is the code I used in the video, for those who prefer reading instead of or in addition to video.

## Load data

Our analysis goal is to understand how [rents in San Francisco](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-07-05) are changing over time. This dataset is from last month, but I didn't get a chance to look at it then because of preparing for rstudio::conf()! Let's filter down to apartments that are whole apartments (not a room for rent) and listings that are from the last 15 years or so.

```{r}
library(tidyverse)

rent_raw <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-05/rent.csv')

rent <- rent_raw %>%
    filter(room_in_apt < 1, year > 2005) %>%
    select(date, price, beds, baths) %>%
    mutate(date = lubridate::ymd(date)) %>%
    arrange(date)

rent
```

## Compute a sliding mean

Let's [use the `sliding_period_*()` family of functions](https://davisvaughan.github.io/slider/reference/slide_period.html), since we have date information and want to aggregate in a date-aware way. These functions may reminder you of `purrr::map()` in that you can specify the _type_ of the output and you pass in a function to use for the aggregation. How can we compute the mean price during each month?

```{r}
library(slider)
slide_period_dbl(rent, rent$date, "month", ~ mean(.$price))
```

Nice! But I think I would like this in a dataframe, with the date that belongs to each mean price and maybe also the number that was used for the aggregation. I think this is easiest if I write a little function:

```{r}
mean_rent <- function(df) {
    summarize(df, date = min(date), rent = mean(price), n = n())
}

slide_period_dfr(rent, rent$date, "month", mean_rent)
```

I could save this object, or I can just pipe it straight to ggplot2:

```{r}
slide_period_dfr(rent, rent$date, "month", mean_rent) %>%
    ggplot(aes(date, rent)) +
    geom_line(size = 1.5, alpha = 0.8)
```

Now the real helpfulness of slider comes in when I want to more flexibly aggregate, with a more complex sliding window. Let's use `.before = 1`, which makes a sliding window that includes both the current month and the _previous_ month:

```{r}
slide_period_dfr(rent, rent$date, "month", mean_rent, .before = 1) %>%
    ggplot(aes(date, rent)) +
    geom_line(size = 1.5, alpha = 0.8)
```

The main difference we see here is that the variation is smoothing out a bit, since we are taking the average over a longer time period. 

## Different sliding windows

What does it look like if we try different values for `.before`, from one previous month to six previous months?

```{r}
#| fig-height: 4
tibble(.before = 1:6) %>%
    mutate(mean_rent = map(
        .before, 
        ~ slide_period_dfr(rent, rent$date, "month", mean_rent, .before = .x)
    )) %>%
    unnest(mean_rent) %>%
    ggplot(aes(date, rent, color = .before, group = .before)) +
    geom_line(alpha = 0.6, size = 1.5) +
    scale_color_viridis_c() +
    scale_y_continuous(labels = scales::dollar) +
    labs(x = NULL, color = "How many months\nin sliding window?")
```

We see smoother change as we aggregate with larger windows, just like we would expect!

